*** Begin Patch

*** Update File: rc.lua

@@

-- }}}

-- {{{ Autostart windowless processes

+-- Optional: disable LGI-based widgets for testing if you suspect GLib2/LGI issues

+-- You can enable by setting environment variable AWESOME_DISABLE_LGI=1 before starting Awesome.

+local disable_lgi = (os.getenv("AWESOME_DISABLE_LGI") == "1")

+if disable_lgi then


- -- Print a note to the startup logs

- naughty.notify({ preset = naughty.config.presets.critical,

- 

	title  = "LGI testing",



- 

	text   = "AWESOME_DISABLE_LGI is set; LGI-based widgets will be skipped." })



+end

+

+-- Optional: diagnostic print helper (will only print if not disabled)

+local function startup_diag()


- if disable_lgi then return end

- local function safe_run(cmd)

- 

	local f = io.popen(cmd)



- 

	if f then



- 

	local out = f:read("*a")



- 

	f:close()



- 

	return (out or ""):gsub("\n+$", "")



- 

	end



- 

	return "N/A"



- end

- local glib2_ver = safe_run("pacman -Q glib2 2>/dev/null || true")

- local gi_ver = safe_run("pacman -Q gobject-introspection 2>/dev/null || true")

- local lua_ver = _G._LOADED and (package.loaded and package.loaded["lua"] or _VERSION) or _VERSION

- local lgindows = safe_run("lua -e 'print(require("lgi"))' 2>&1 | head -n 1 2>/dev/null || true")

- naughty.notify({ preset = naughty.config.presets.normal,

- 

	title = "Startup Diagnostics",



- 

	text = string.format("glib2: %s | gobject-introspection: %s | Lua: %s | Awesome: %s | LGI: %s",



- 

	glib2_ver or "unknown",



- 

	gi_ver or "unknown",



- 

	lua_ver or _VERSION,



- 

	(awesome and awesome.version) or "unknown",



- 

	lgindows or "not loaded") })



+end

+-- Run diagnostics after starting up (hooked into startup path below)

+if not disable_lgi then


- startup_diag()

+end

+

-- }}}

-- {{{ Variable definitions

*** End Patch

*** Begin Patch

*** Update File: rc.lua

@@

-local run_shell = require("awesome-wm-widgets.run-shell-3.run-shell")

+local run_shell = (disable_lgi == true) and nil or require("awesome-wm-widgets.run-shell-3.run-shell")

*** End Patch

*** Begin Patch

*** Update File: rc.lua

@@

---[[ Menubar


- -- awful.key({ modkey }, "p", function() menubar.show() end,

- --          {description = "show the menubar", group = "launcher"}),

- --]]

+--[[ Menubar


- -- awful.key({ modkey }, "p", function() menubar.show() end,

- --          {description = "show the menubar", group = "launcher"}),

- --]]

*** End Patch

*** Begin Patch

*** Update File: rc.lua

@@


- awful.key({ modkey, "Shift" }, "w", function()

- 

	awful.spawn(ide)



- end, { dewscription = "run Webstorm", group = "launcher" }),


- awful.key({ modkey, "Shift" }, "w", function()

- 

	awful.spawn(ide)



- end, { description = "run Webstorm", group = "launcher" }),

*** End Patch

*** Begin Patch

*** Update File: rc.lua

@@


- -- [[ dmenu


- -- [[ dmenu

@@


- -- rofi


- -- rofi

*** End Patch

*** Begin Patch

*** Update File: rc.lua

@@


- awful.key({ modkey }, "x", function()


- awful.key({ modkey }, "x", function()

@@


- 

	os.execute(




- 

	os.execute(



@@


- --]]


- --]]

*** End Patch

*** Begin Patch

*** Update File: rc.lua

@@

--- Autorun programs

-autorun = true

-autorunApps = {

+-- Autorun programs

+autorun = true

+autorunApps = {

*** End Patch

*** Begin Patch

*** Update File: rc.lua

@@



- xrandr --output DP-0 --primary",



- xrandr --output DP-0 --primary",

*** End Patch

*** Begin Patch

*** Update File: rc.lua

@@

--- Autorun programs

-autorun = true

-autorunApps = {

+-- Autorun programs

+autorun = true

+autorunApps = {

*** End Patch
